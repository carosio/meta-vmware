This README file contains information on building the tplino-meta-vmware
BSP layer. Please see the corresponding sections below for details.


Dependencies
============

This layer depends on:

  URI: git://github.com/carosio/meta-caros
  branch: master


Patches
=======

Please submit any patches against this BSP to Travelping (info@travelping.com)


Table of Contents
=================

I. Building the meta-vmware BSP layer
II. OVF Profiling
III. Changing Netowrk Interface Types 

I. Building the meta-vmware SP layer
=======================================

In order to build an image with BSP support for a given release, you
need to clone the tplino-core repository.

Having done that, and assuming you placed the folder
at the top-level of your yocto build tree, you can build a
vmware image by adding the location of the tplino-meta-vmware
layer to bblayers.conf, along with any other layers needed (to access
common metadata shared between BSPs) e.g.:

  yocto/meta-xxxx \
yocto/meta-xxxx/tplino-meta-vmware \

To enable the vmware layer, add the vmware MACHINE to local.conf:

MACHINE ?= "vmware"

You should then be able to build a vmware image as such:

  $ source oe-init-build-env
  $ bitbake core-image-tplino

At the end of a successful build, you should have an
virtual machine disk(vmdk) you can boot that as
hard disk from an virtual maschine.

II. OVF Profiling
=====================

This release adds OVF profiling support to build vAPPs.

To add OVF support to a new image
* register with VMware and download VMware-vix-disklib-1.2.0-230216.x86_64.tar.gz
from https://my.vmware.com/group/vmware/get-download?downloadGroup=VDDK-1-2 into
the recipes-vmware/vmware-disklib/files directory
* add the following line to your image recipe:

  require recipes-vmware/ovf/vmware-ovf.inc

The OVF task checks if the target MACHINE type is "vmware", so no
unneeded functionality is added, if the image is built for a different target.

Use the following parameters for customization in local.conf

  * CORE_NUMBER    - # of Core(s) per VM         [default: 1]
  * RAM_SIZE       - VM's RAM in MB              [default: 512]
  * DISK_SIZE_DATA - Data partition's size in MB [default: 6144]
  * DISK_SIZE_ROOT - Root partition's size in MB [default: 64]ยน

ยน While the default size of the root partition is set to 64 MB, it is actually,
  when not explicitly set, calculated by multiplying the space used by the actual
  root file system with IMAGE_OVERHEAD_FACTOR (default: 1.3) and adding
  IMAGE_ROOTFS_EXTRA_SPACE (default: 0) and then doing some rounding.

III. Changing Network Interface Types
====================================

Network interface type is set to e1000 by default. The udev rules are set for e1000
and vmxnet3 interfaces. No other interface types are supported. Use the same interface
type for all interfaces, mixing interface types is not supported.
